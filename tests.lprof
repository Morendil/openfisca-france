Timer unit: 1e-06 s

Total time: 24.9096 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/data_storage.py
Function: wrapper at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                                   @wraps(fun)
    17                                                   def wrapper(self, period, *args, **kwargs):
    18   5134324    1880201.0      0.4      7.5              if period is None:
    19                                                           pass
    20   5134324    2106901.0      0.4      8.5              if not self.is_eternal:
    21   5111485   10563763.0      2.1     42.4                  period = get_period(period)
    22                                                       else:
    23     22839     284337.0     12.4      1.1                  period = get_period(eternity)
    24                                           
    25   5134324   10074407.0      2.0     40.4              return fun(self, period, *args, **kwargs)

Total time: 0.403496 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/data_storage.py
Function: __init__ at line 36

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    36                                               @profile
    37                                               def __init__(self, is_eternal=False):
    38    174132     337194.0      1.9     83.6          self._arrays = {}
    39    174132      66302.0      0.4     16.4          self.is_eternal = is_eternal

Total time: 35.1566 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/entities.py
Function: check_variable_defined_for_entity at line 170

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   170                                               @profile
   171                                               def check_variable_defined_for_entity(self, variable_name):
   172   6422093   31590507.0      4.9     89.9          variable_entity = self.simulation.tax_benefit_system.get_variable(variable_name, check_existence = True).entity
   173   6422093    3566067.0      0.6     10.1          if not isinstance(self, variable_entity):
   174                                                       message = linesep.join([
   175                                                           u"You tried to compute the variable '{0}' for the entity '{1}';".format(variable_name, self.plural),
   176                                                           u"however the variable '{0}' is defined for '{1}'.".format(variable_name, variable_entity.plural),
   177                                                           u"Learn more about entities in our documentation:",
   178                                                           u"<http://openfisca.org/doc/coding-the-legislation/50_entities.html>."])
   179                                                       raise ValueError(message)

Total time: 352.922 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/entities.py
Function: __call__ at line 201

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   201                                               @profile
   202                                               def __call__(self, variable_name, period = None, options = [], **parameters):
   203                                                   """
   204                                                       Calculate the variable ``variable_name`` for the entity and the period ``period``, using the variable formula if it exists.
   205                                           
   206                                                       Example:
   207                                           
   208                                                       >>> person('salary', '2017-04')
   209                                                       >>> array([300.])
   210                                           
   211                                                       :returns: A numpy array containing the result of the calculation
   212                                                   """
   213   2810549   26381071.0      9.4      7.5          self.check_variable_defined_for_entity(variable_name)
   214                                           
   215   2810549    3284959.0      1.2      0.9          self.check_period_validity(variable_name, period)
   216                                           
   217   2810549    1493687.0      0.5      0.4          if ADD in options and DIVIDE in options:
   218                                                       raise ValueError(u'Options ADD and DIVIDE are incompatible (trying to compute variable {})'.format(variable_name).encode('utf-8'))
   219   2810549    1182700.0      0.4      0.3          elif ADD in options:
   220    623837  134126692.0    215.0     38.0              return self.simulation.calculate_add(variable_name, period, **parameters)
   221   2186712     914079.0      0.4      0.3          elif DIVIDE in options:
   222     34666    3309127.0     95.5      0.9              return self.simulation.calculate_divide(variable_name, period, **parameters)
   223                                                   else:
   224   2152046  182229543.0     84.7     51.6              return self.simulation.calculate(variable_name, period, **parameters)

Total time: 37.2421 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/entities.py
Function: get_holder at line 236

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   236                                               @profile
   237                                               def get_holder(self, variable_name):
   238   3611544   29464626.0      8.2     79.1          self.check_variable_defined_for_entity(variable_name)
   239   3611544    2285745.0      0.6      6.1          holder = self._holders.get(variable_name)
   240   3611544    1306223.0      0.4      3.5          if holder:
   241   3437412    1093801.0      0.3      2.9              return holder
   242    174132     728898.0      4.2      2.0          variable = self.simulation.tax_benefit_system.get_variable(variable_name)
   243    174132      66398.0      0.4      0.2          self._holders[variable_name] = holder = Holder(
   244    174132      60502.0      0.3      0.2              entity = self,
   245    174132    2177786.0     12.5      5.8              variable = variable,
   246                                                       )
   247    174132      58077.0      0.3      0.2          return holder

Total time: 38.1762 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/holders.py
Function: get_array at line 78

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    78                                               @profile
    79                                               def get_array(self, period, extra_params = None):
    80                                                   """
    81                                                       Get the value of the variable for the given period (and possibly a list of extra parameters).
    82                                           
    83                                                       If the value is not known, return ``None``.
    84                                                   """
    85   3837239    2184995.0      0.6      5.7          if self.variable.is_neutralized:
    86                                                       return self.default_array()
    87   3837239   33059970.0      8.6     86.6          value = self._memory_storage.get(period, extra_params)
    88   3837239    1521371.0      0.4      4.0          if value is not None:
    89   2444061     790444.0      0.3      2.1              return value
    90   1393178     619385.0      0.4      1.6          if self._disk_storage:
    91                                                       return self._disk_storage.get(period, extra_params)

Total time: 22.2876 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/holders.py
Function: put_in_cache at line 184

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   184                                               @profile
   185                                               def put_in_cache(self, value, period, extra_params = None):
   186   1297085     886998.0      0.7      4.0          if self._do_not_store:
   187                                                       return
   188                                           
   189   1297085     843323.0      0.7      3.8          simulation = self.simulation
   190                                           
   191   1297085    1033742.0      0.8      4.6          if self.variable.value_type == Enum:
   192     60443     412792.0      6.8      1.9              value = self.variable.possible_values.encode(value)
   193                                           
   194   1297085    1261040.0      1.0      5.7          if value.dtype != self.variable.dtype:
   195      9626       5508.0      0.6      0.0              try:
   196      9626      32532.0      3.4      0.1                  value = value.astype(self.variable.dtype)
   197                                                       except ValueError:
   198                                                           raise ValueError(
   199                                                               u'Unable to set value "{}" for variable "{}", as the variable dtype "{}" does not match the value dtype "{}".'
   200                                                               .format(value, self.variable.name, self.variable.dtype, value.dtype)
   201                                                               .encode('utf-8'))
   202                                           
   203   1297085    1009123.0      0.8      4.5          if self.variable.definition_period != ETERNITY:
   204   1295359     790916.0      0.6      3.5              if period is None:
   205                                                           raise ValueError('A period must be specified to put values in cache, except for variables with ETERNITY as as period_definition.')
   206   1295359    1916175.0      1.5      8.6              if ((self.variable.definition_period == MONTH and period.unit != periods.MONTH) or
   207   1295359    1068151.0      0.8      4.8                 (self.variable.definition_period == YEAR and period.unit != periods.YEAR)):
   208                                                           error_message = os.linesep.join([
   209                                                               u'Unable to set a value for variable {0} for {1}-long period {2}.',
   210                                                               u'{0} is only defined for {3}s. Please adapt your input.',
   211                                                               u'If you are the maintainer of {0}, you can consider adding it a set_input attribute to enable automatic period casting.'
   212                                                               ]).format(
   213                                                                   self.variable.name,
   214                                                                   period.unit,
   215                                                                   period,
   216                                                                   self.variable.definition_period
   217                                                               ).encode('utf-8')
   218                                           
   219                                                           raise PeriodMismatchError(
   220                                                               self.variable.name,
   221                                                               period,
   222                                                               self.variable.definition_period,
   223                                                               error_message
   224                                                               )
   225                                           
   226   1297085     872697.0      0.7      3.9          if (simulation.opt_out_cache and
   227                                                           simulation.tax_benefit_system.cache_blacklist and
   228                                                           self.variable.name in simulation.tax_benefit_system.cache_blacklist):
   229                                                       return
   230                                           
   231                                                   should_store_on_disk = (
   232   1297085     994538.0      0.8      4.5              self._on_disk_storable and
   233                                                       self._memory_storage.get(period, extra_params) is None and  # If there is already a value in memory, replace it and don't put a new value in the disk storage
   234                                                       psutil.virtual_memory().percent >= self.simulation.memory_config.max_memory_occupation_pc
   235                                                       )
   236                                           
   237   1297085     786320.0      0.6      3.5          if should_store_on_disk:
   238                                                       self._disk_storage.put(period, value, extra_params)
   239                                                   else:
   240   1297085   10373749.0      8.0     46.5              self._memory_storage.put(period, value, extra_params)

Total time: 28.8471 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/periods.py
Function: get_subperiods at line 413

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   413                                               @profile
   414                                               def get_subperiods(self, unit):
   415                                                   """
   416                                                       Return the list of all the periods of unit ``unit`` contained in self.
   417                                           
   418                                                       Examples:
   419                                           
   420                                                       >>> period('2017').get_subperiods(MONTH)
   421                                                       >>> [period('2017-01'), period('2017-02'), ... period('2017-12')]
   422                                           
   423                                                       >>> period('year:2014:2').get_subperiods(YEAR)
   424                                                       >>> [period('2014'), period('2015')]
   425                                                   """
   426    623837     763914.0      1.2      2.6          if self.unit == MONTH and unit == YEAR:
   427                                                       raise ValueError(u'Cannot subdivise months into years')
   428    623837     509602.0      0.8      1.8          if self.unit == YEAR and unit == YEAR:
   429     16298     215137.0     13.2      0.7              return [self.this_year.offset(i, YEAR) for i in range(self.size)]
   430                                           
   431   1925306   27358468.0     14.2     94.8          return [self.first_month.offset(i, MONTH) for i in range(self.size_in_months)]

Total time: 13.6066 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/periods.py
Function: offset at line 433

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   433                                               @profile
   434                                               def offset(self, offset, unit = None):
   435                                                   """Increment (or decrement) the given period with offset units.
   436                                           
   437                                                   >>> period('day', 2014).offset(1)
   438                                                   Period((u'day', Instant((2014, 1, 2)), 365))
   439                                                   >>> period('day', 2014).offset(1, 'day')
   440                                                   Period((u'day', Instant((2014, 1, 2)), 365))
   441                                                   >>> period('day', 2014).offset(1, 'month')
   442                                                   Period((u'day', Instant((2014, 2, 1)), 365))
   443                                                   >>> period('day', 2014).offset(1, 'year')
   444                                                   Period((u'day', Instant((2015, 1, 1)), 365))
   445                                           
   446                                                   >>> period('month', 2014).offset(1)
   447                                                   Period((u'month', Instant((2014, 2, 1)), 12))
   448                                                   >>> period('month', 2014).offset(1, 'day')
   449                                                   Period((u'month', Instant((2014, 1, 2)), 12))
   450                                                   >>> period('month', 2014).offset(1, 'month')
   451                                                   Period((u'month', Instant((2014, 2, 1)), 12))
   452                                                   >>> period('month', 2014).offset(1, 'year')
   453                                                   Period((u'month', Instant((2015, 1, 1)), 12))
   454                                           
   455                                                   >>> period('year', 2014).offset(1)
   456                                                   Period((u'year', Instant((2015, 1, 1)), 1))
   457                                                   >>> period('year', 2014).offset(1, 'day')
   458                                                   Period((u'year', Instant((2014, 1, 2)), 1))
   459                                                   >>> period('year', 2014).offset(1, 'month')
   460                                                   Period((u'year', Instant((2014, 2, 1)), 1))
   461                                                   >>> period('year', 2014).offset(1, 'year')
   462                                                   Period((u'year', Instant((2015, 1, 1)), 1))
   463                                           
   464                                                   >>> period('day', '2011-2-28').offset(1)
   465                                                   Period((u'day', Instant((2011, 3, 1)), 1))
   466                                                   >>> period('month', '2011-2-28').offset(1)
   467                                                   Period((u'month', Instant((2011, 3, 28)), 1))
   468                                                   >>> period('year', '2011-2-28').offset(1)
   469                                                   Period((u'year', Instant((2012, 2, 28)), 1))
   470                                           
   471                                                   >>> period('day', '2011-3-1').offset(-1)
   472                                                   Period((u'day', Instant((2011, 2, 28)), 1))
   473                                                   >>> period('month', '2011-3-1').offset(-1)
   474                                                   Period((u'month', Instant((2011, 2, 1)), 1))
   475                                                   >>> period('year', '2011-3-1').offset(-1)
   476                                                   Period((u'year', Instant((2010, 3, 1)), 1))
   477                                           
   478                                                   >>> period('day', '2014-1-30').offset(3)
   479                                                   Period((u'day', Instant((2014, 2, 2)), 1))
   480                                                   >>> period('month', '2014-1-30').offset(3)
   481                                                   Period((u'month', Instant((2014, 4, 30)), 1))
   482                                                   >>> period('year', '2014-1-30').offset(3)
   483                                                   Period((u'year', Instant((2017, 1, 30)), 1))
   484                                           
   485                                                   >>> period('day', 2014).offset(-3)
   486                                                   Period((u'day', Instant((2013, 12, 29)), 365))
   487                                                   >>> period('month', 2014).offset(-3)
   488                                                   Period((u'month', Instant((2013, 10, 1)), 12))
   489                                                   >>> period('year', 2014).offset(-3)
   490                                                   Period((u'year', Instant((2011, 1, 1)), 1))
   491                                           
   492                                                   >>> period('day', '2014-2-3').offset('first-of', 'month')
   493                                                   Period((u'day', Instant((2014, 2, 1)), 1))
   494                                                   >>> period('day', '2014-2-3').offset('first-of', 'year')
   495                                                   Period((u'day', Instant((2014, 1, 1)), 1))
   496                                           
   497                                                   >>> period('day', '2014-2-3', 4).offset('first-of', 'month')
   498                                                   Period((u'day', Instant((2014, 2, 1)), 4))
   499                                                   >>> period('day', '2014-2-3', 4).offset('first-of', 'year')
   500                                                   Period((u'day', Instant((2014, 1, 1)), 4))
   501                                           
   502                                                   >>> period('month', '2014-2-3').offset('first-of')
   503                                                   Period((u'month', Instant((2014, 2, 1)), 1))
   504                                                   >>> period('month', '2014-2-3').offset('first-of', 'month')
   505                                                   Period((u'month', Instant((2014, 2, 1)), 1))
   506                                                   >>> period('month', '2014-2-3').offset('first-of', 'year')
   507                                                   Period((u'month', Instant((2014, 1, 1)), 1))
   508                                           
   509                                                   >>> period('month', '2014-2-3', 4).offset('first-of')
   510                                                   Period((u'month', Instant((2014, 2, 1)), 4))
   511                                                   >>> period('month', '2014-2-3', 4).offset('first-of', 'month')
   512                                                   Period((u'month', Instant((2014, 2, 1)), 4))
   513                                                   >>> period('month', '2014-2-3', 4).offset('first-of', 'year')
   514                                                   Period((u'month', Instant((2014, 1, 1)), 4))
   515                                           
   516                                                   >>> period('year', 2014).offset('first-of')
   517                                                   Period((u'year', Instant((2014, 1, 1)), 1))
   518                                                   >>> period('year', 2014).offset('first-of', 'month')
   519                                                   Period((u'year', Instant((2014, 1, 1)), 1))
   520                                                   >>> period('year', 2014).offset('first-of', 'year')
   521                                                   Period((u'year', Instant((2014, 1, 1)), 1))
   522                                           
   523                                                   >>> period('year', '2014-2-3').offset('first-of')
   524                                                   Period((u'year', Instant((2014, 1, 1)), 1))
   525                                                   >>> period('year', '2014-2-3').offset('first-of', 'month')
   526                                                   Period((u'year', Instant((2014, 2, 1)), 1))
   527                                                   >>> period('year', '2014-2-3').offset('first-of', 'year')
   528                                                   Period((u'year', Instant((2014, 1, 1)), 1))
   529                                           
   530                                                   >>> period('day', '2014-2-3').offset('last-of', 'month')
   531                                                   Period((u'day', Instant((2014, 2, 28)), 1))
   532                                                   >>> period('day', '2014-2-3').offset('last-of', 'year')
   533                                                   Period((u'day', Instant((2014, 12, 31)), 1))
   534                                           
   535                                                   >>> period('day', '2014-2-3', 4).offset('last-of', 'month')
   536                                                   Period((u'day', Instant((2014, 2, 28)), 4))
   537                                                   >>> period('day', '2014-2-3', 4).offset('last-of', 'year')
   538                                                   Period((u'day', Instant((2014, 12, 31)), 4))
   539                                           
   540                                                   >>> period('month', '2014-2-3').offset('last-of')
   541                                                   Period((u'month', Instant((2014, 2, 28)), 1))
   542                                                   >>> period('month', '2014-2-3').offset('last-of', 'month')
   543                                                   Period((u'month', Instant((2014, 2, 28)), 1))
   544                                                   >>> period('month', '2014-2-3').offset('last-of', 'year')
   545                                                   Period((u'month', Instant((2014, 12, 31)), 1))
   546                                           
   547                                                   >>> period('month', '2014-2-3', 4).offset('last-of')
   548                                                   Period((u'month', Instant((2014, 2, 28)), 4))
   549                                                   >>> period('month', '2014-2-3', 4).offset('last-of', 'month')
   550                                                   Period((u'month', Instant((2014, 2, 28)), 4))
   551                                                   >>> period('month', '2014-2-3', 4).offset('last-of', 'year')
   552                                                   Period((u'month', Instant((2014, 12, 31)), 4))
   553                                           
   554                                                   >>> period('year', 2014).offset('last-of')
   555                                                   Period((u'year', Instant((2014, 12, 31)), 1))
   556                                                   >>> period('year', 2014).offset('last-of', 'month')
   557                                                   Period((u'year', Instant((2014, 1, 31)), 1))
   558                                                   >>> period('year', 2014).offset('last-of', 'year')
   559                                                   Period((u'year', Instant((2014, 12, 31)), 1))
   560                                           
   561                                                   >>> period('year', '2014-2-3').offset('last-of')
   562                                                   Period((u'year', Instant((2014, 12, 31)), 1))
   563                                                   >>> period('year', '2014-2-3').offset('last-of', 'month')
   564                                                   Period((u'year', Instant((2014, 2, 28)), 1))
   565                                                   >>> period('year', '2014-2-3').offset('last-of', 'year')
   566                                                   Period((u'year', Instant((2014, 12, 31)), 1))
   567                                                   """
   568   1587172   13606553.0      8.6    100.0          return self.__class__((self[0], self[1].offset(offset, self[0] if unit is None else unit), self[2]))

Total time: 279.765 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/simulations.py
Function: calculate at line 132

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   132                                               @profile
   133                                               def calculate(self, variable_name, period, **parameters):
   134                                                   """
   135                                                       Calculate the variable ``variable_name`` for the period ``period``, using the variable formula if it exists.
   136                                           
   137                                                       :returns: A numpy array containing the result of the calculation
   138                                                   """
   139   3504965   40011677.0     11.4     14.3          entity = self.get_variable_entity(variable_name)
   140   3504965   49480603.0     14.1     17.7          holder = entity.get_holder(variable_name)
   141   3504965   15251314.0      4.4      5.5          variable = self.tax_benefit_system.get_variable(variable_name)
   142                                           
   143   3504965    2962007.0      0.8      1.1          if period is not None and not isinstance(period, periods.Period):
   144                                                       period = periods.period(period)
   145                                           
   146   3504965    2053385.0      0.6      0.7          if self.trace:
   147                                                       self.tracer.record_calculation_start(variable.name, period, **parameters)
   148                                           
   149   3504965   27585585.0      7.9      9.9          self._check_period_consistency(period, variable)
   150                                           
   151   3504965    2438252.0      0.7      0.9          extra_params = parameters.get('extra_params', ())
   152                                           
   153                                                   # First look for a value already cached
   154   3504965   48722176.0     13.9     17.4          cached_array = holder.get_array(period, extra_params)
   155   3504965    1991772.0      0.6      0.7          if cached_array is not None:
   156   2314388    1375595.0      0.6      0.5              if self.trace:
   157                                                           self.tracer.record_calculation_end(variable.name, period, cached_array, **parameters)
   158   2314388    1142700.0      0.5      0.4              return cached_array
   159                                           
   160   1190577     810994.0      0.7      0.3          max_nb_cycles = parameters.get('max_nb_cycles')
   161   1190577     652858.0      0.5      0.2          if max_nb_cycles is not None:
   162     14238       9527.0      0.7      0.0              self.max_nb_cycles = max_nb_cycles
   163                                           
   164                                                   # First, try to run a formula
   165   1190577   35969789.0     30.2     12.9          array = self._run_formula(variable, entity, period, extra_params, max_nb_cycles)
   166                                           
   167                                                   # If no result, try a base function
   168   1190171     864224.0      0.7      0.3          if array is None and variable.base_function:
   169    147570    6548436.0     44.4      2.3              array = variable.base_function(holder, period, *extra_params)
   170                                           
   171                                                   # If no result, use the default value
   172   1190171     670209.0      0.6      0.2          if array is None:
   173    411852    2291441.0      5.6      0.8              array = holder.default_array()
   174                                           
   175   1190171    2935296.0      2.5      1.0          self._clean_cycle_detection_data(variable.name)
   176   1190171     684159.0      0.6      0.2          if max_nb_cycles is not None:
   177     14238      11484.0      0.8      0.0              self.max_nb_cycles = None
   178                                           
   179   1190171   33933877.0     28.5     12.1          holder.put_in_cache(array, period, extra_params)
   180   1190171     765438.0      0.6      0.3          if self.trace:
   181                                                       self.tracer.record_calculation_end(variable.name, period, array, **parameters)
   182                                           
   183   1190171     602197.0      0.5      0.2          return array

Total time: 240.232 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/simulations.py
Function: calculate_add at line 185

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   185                                               @profile
   186                                               def calculate_add(self, variable_name, period, **parameters):
   187    623837    2868041.0      4.6      1.2          variable = self.tax_benefit_system.get_variable(variable_name)
   188                                           
   189    623837     559638.0      0.9      0.2          if period is not None and not isinstance(period, periods.Period):
   190                                                       period = periods.period(period)
   191                                           
   192                                                   # Check that the requested period matches definition_period
   193    623837     518653.0      0.8      0.2          if variable.definition_period == periods.YEAR and period.unit == periods.MONTH:
   194                                                       raise ValueError(u'Unable to compute variable {0} for period {1} : {0} can only be computed for year-long periods. You can use the DIVIDE option to get an estimate of {0} by dividing the yearly value by 12, or change the requested period to "period.this_year".'.format(
   195                                                           variable.name,
   196                                                           period,
   197                                                           ).encode('utf-8'))
   198                                           
   199    623837     658638.0      1.1      0.3          if variable.definition_period not in [periods.MONTH, periods.YEAR]:
   200                                                       raise ValueError(u'Unable to sum constant variable {} over period {} : only variables defined monthly or yearly can be summed over time.'.format(
   201                                                           variable.name,
   202                                                           period).encode('utf-8'))
   203                                           
   204    623837     356137.0      0.6      0.1          return sum(
   205    623837     509876.0      0.8      0.2              self.calculate(variable_name, sub_period, **parameters)
   206    623837  234760981.0    376.3     97.7              for sub_period in period.get_subperiods(variable.definition_period)
   207                                                       )

Total time: 249.821 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/simulations.py
Function: _run_formula at line 246

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   246                                               @profile
   247                                               def _run_formula(self, variable, entity, period, extra_params, max_nb_cycles):
   248                                                   """
   249                                                       Find the ``variable`` formula for the given ``period`` if it exists, and apply it to ``entity``.
   250                                                   """
   251                                           
   252   1190577    8192108.0      6.9      3.3          formula = variable.get_formula(period)
   253   1190577     611024.0      0.5      0.2          if formula is None:
   254    550518     231397.0      0.4      0.1              return None
   255    640059     383298.0      0.6      0.2          parameters_at = self.tax_benefit_system.get_parameters_at_instant
   256    640059     277065.0      0.4      0.1          try:
   257    640059    2768769.0      4.3      1.1              self._check_for_cycle(variable, period)
   258    639978     595648.0      0.9      0.2              if formula.__code__.co_argcount == 2:
   259     78413   15917203.0    203.0      6.4                  array = formula(entity, period)
   260                                                       else:
   261    561565  216858249.0    386.2     86.8                  array = formula(entity, period, parameters_at, *extra_params)
   262       487        348.0      0.7      0.0          except CycleError as error:
   263       487       1311.0      2.7      0.0              self._clean_cycle_detection_data(variable.name)
   264       487        235.0      0.5      0.0              if max_nb_cycles is None:
   265       406        221.0      0.5      0.0                  if self.trace:
   266                                                               self.tracer.record_calculation_abortion(variable.name, period, extra_params = extra_params)
   267                                                           # Re-raise until reaching the first variable called with max_nb_cycles != None in the stack.
   268       406        258.0      0.6      0.0                  raise error
   269        81         48.0      0.6      0.0              self.max_nb_cycles = None
   270        81         27.0      0.3      0.0              return None
   271                                           
   272    639572    2023319.0      3.2      0.8          self._check_formula_result(array, variable, entity, period)
   273    639572    1960651.0      3.1      0.8          return self._cast_formula_result(array, variable)

Total time: 12.2691 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/simulations.py
Function: _check_period_consistency at line 275

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   275                                               @profile
   276                                               def _check_period_consistency(self, period, variable):
   277                                                   """
   278                                                       Check that a period matches the variable definition_period
   279                                                   """
   280   3504965    2330100.0      0.7     19.0          if variable.definition_period == periods.ETERNITY:
   281     21113       8874.0      0.4      0.1              return  # For variables which values are constant in time, all periods are accepted
   282                                           
   283   3483852    4259531.0      1.2     34.7          if variable.definition_period == periods.MONTH and period.unit != periods.MONTH:
   284                                                       raise ValueError(u'Unable to compute variable {0} for period {1} : {0} must be computed for a whole month. You can use the ADD option to sum {0} over the requested period, or change the requested period to "period.first_month".'.format(
   285                                                           variable.name,
   286                                                           period
   287                                                           ).encode('utf-8'))
   288                                           
   289   3483852    2177468.0      0.6     17.7          if variable.definition_period == periods.YEAR and period.unit != periods.YEAR:
   290                                                       raise ValueError(u'Unable to compute variable {0} for period {1} : {0} must be computed for a whole year. You can use the DIVIDE option to get an estimate of {0} by dividing the yearly value by 12, or change the requested period to "period.this_year".'.format(
   291                                                           variable.name,
   292                                                           period
   293                                                           ).encode('utf-8'))
   294                                           
   295   3483852    3493111.0      1.0     28.5          if period.size != 1:
   296                                                       raise ValueError(u'Unable to compute variable {0} for period {1} : {0} must be computed for a whole {2}. You can use the ADD option to sum {0} over the requested period.'.format(
   297                                                           variable.name,
   298                                                           period,
   299                                                           'month' if variable.definition_period == periods.MONTH else 'year'
   300                                                           ).encode('utf-8'))

Total time: 29.981 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/simulations.py
Function: get_variable_entity at line 419

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   419                                               @profile
   420                                               def get_variable_entity(self, variable_name):
   421                                           
   422   3600323   16130532.0      4.5     53.8          variable = self.tax_benefit_system.get_variable(variable_name, check_existence = True)
   423   3600323   13850449.0      3.8     46.2          return self.get_entity(variable.entity)

Total time: 3.34272 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/simulations.py
Function: get_entity at line 425

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   425                                               @profile
   426                                               def get_entity(self, entity_type = None, plural = None):
   427   3741736    1378753.0      0.4     41.2          if entity_type:
   428   3741736    1963969.0      0.5     58.8              return self.entities[entity_type.key]
   429                                                   if plural:
   430                                                       return [entity for entity in self.entities.values() if entity.plural == plural][0]

Total time: 18.9919 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/taxbenefitsystems.py
Function: get_variable at line 250

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   250                                               @profile
   251                                               def get_variable(self, variable_name, check_existence = False):
   252                                                   """
   253                                                   Get a variable from the tax and benefit system.
   254                                           
   255                                                   :param variable_name: Name of the requested variable.
   256                                                   :param check_existence: If True, raise an error if the requested variable does not exist.
   257                                                   """
   258  14362825    9917749.0      0.7     52.2          variables = self.variables.get(variable_name)
   259  14362825    4937129.0      0.3     26.0          if not variables and check_existence:
   260                                                       raise VariableNotFound(variable_name, self)
   261  14362825    4137008.0      0.3     21.8          return variables

Total time: 0.430097 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/variables.py
Function: __init__ at line 146

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   146                                               @profile
   147                                               def __init__(self, baseline_variable = None):
   148      1833       8674.0      4.7      2.0          self.name = to_unicode(self.__class__.__name__)
   149                                                   attr = {
   150      1833      14185.0      7.7      3.3              name: value for name, value in self.__class__.__dict__.items()
   151                                                       if not name.startswith('__')}
   152      1833       2202.0      1.2      0.5          self.baseline_variable = baseline_variable
   153      1833      22743.0     12.4      5.3          self.value_type = self.set(attr, 'value_type', required = True, allowed_values = VALUE_TYPES.keys())
   154      1833       2765.0      1.5      0.6          self.dtype = VALUE_TYPES[self.value_type]['dtype']
   155      1833       2500.0      1.4      0.6          self.json_type = VALUE_TYPES[self.value_type]['json_type']
   156      1833       2321.0      1.3      0.5          if self.value_type == Enum:
   157        23        297.0     12.9      0.1              self.possible_values = self.set(attr, 'possible_values', required = True, setter = self.set_possible_values)
   158      1833       2231.0      1.2      0.5          if self.value_type == str:
   159         3         31.0     10.3      0.0              self.max_length = self.set(attr, 'max_length', allowed_type = int)
   160         3          3.0      1.0      0.0              if self.max_length:
   161         3          7.0      2.3      0.0                  self.dtype = '|S{}'.format(self.max_length)
   162      1833       2114.0      1.2      0.5          if self.value_type == Enum:
   163        23        253.0     11.0      0.1              self.default_value = self.set(attr, 'default_value', allowed_type = self.possible_values, required = True)
   164                                                   else:
   165      1810      21696.0     12.0      5.0              self.default_value = self.set(attr, 'default_value', allowed_type = self.value_type, default = VALUE_TYPES[self.value_type].get('default'))
   166      1833      24274.0     13.2      5.6          self.entity = self.set(attr, 'entity', required = True, setter = self.set_entity)
   167      1833      20136.0     11.0      4.7          self.definition_period = self.set(attr, 'definition_period', required = True, allowed_values = (MONTH, YEAR, ETERNITY))
   168      1833      25547.0     13.9      5.9          self.label = self.set(attr, 'label', allowed_type = basestring_type, setter = self.set_label)
   169      1833      38509.0     21.0      9.0          self.end = self.set(attr, 'end', allowed_type = basestring_type, setter = self.set_end)
   170      1833      23187.0     12.6      5.4          self.reference = self.set(attr, 'reference', setter = self.set_reference)
   171      1833      19991.0     10.9      4.6          self.cerfa_field = self.set(attr, 'cerfa_field', allowed_type = (basestring_type, dict))
   172      1833      19445.0     10.6      4.5          self.unit = self.set(attr, 'unit', allowed_type = basestring_type)
   173      1833       4021.0      2.2      0.9          self.set_input = self.set_set_input(attr.pop('set_input', None))
   174      1833       4003.0      2.2      0.9          self.calculate_output = self.set_calculate_output(attr.pop('calculate_output', None))
   175      1833      20279.0     11.1      4.7          self.is_period_size_independent = self.set(attr, 'is_period_size_independent', allowed_type = bool, default = VALUE_TYPES[self.value_type]['is_period_size_independent'])
   176      1833       5129.0      2.8      1.2          self.base_function = self.set_base_function(attr.pop('base_function', None))
   177                                           
   178      1833       6587.0      3.6      1.5          formulas_attr, unexpected_attrs = _partition(attr, lambda name, value: name.startswith(FORMULA_NAME_PREFIX))
   179      1833     132509.0     72.3     30.8          self.formulas = self.set_formulas(formulas_attr)
   180                                           
   181      1833       2112.0      1.2      0.5          if unexpected_attrs:
   182                                                       raise ValueError(
   183                                                           u'Unexpected attributes in definition of variable "{}": {!r}'
   184                                                           .format(self.name, ', '.join(sorted(unexpected_attrs.keys()))))
   185                                           
   186      1833       2346.0      1.3      0.5          self.is_neutralized = False

Total time: 0.099995 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/variables.py
Function: set at line 190

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   190                                               @profile
   191                                               def set(self, attributes, attribute_name, required = False, allowed_values = None, allowed_type = None, setter = None, default = None):
   192     18356      11070.0      0.6     11.1          value = attributes.pop(attribute_name, None)
   193     18356       9001.0      0.5      9.0          if value is None and self.baseline_variable:
   194                                                       return getattr(self.baseline_variable, attribute_name)
   195     18356       8092.0      0.4      8.1          if required and value is None:
   196                                                       raise ValueError("Missing attribute '{}' in definition of variable '{}'.".format(attribute_name, self.name).encode('utf-8'))
   197     18356       8807.0      0.5      8.8          if allowed_values is not None and value not in allowed_values:
   198                                                       raise ValueError("Invalid value '{}' for attribute '{}' in variable '{}'. Allowed values are '{}'."
   199                                                           .format(value, attribute_name, self.name, allowed_values).encode('utf-8'))
   200     18356      10396.0      0.6     10.4          if allowed_type is not None and value is not None and not isinstance(value, allowed_type):
   201         4          4.0      1.0      0.0              if allowed_type == float and isinstance(value, int):
   202         4          5.0      1.2      0.0                  value = float(value)
   203                                                       else:
   204                                                           raise ValueError("Invalid value '{}' for attribute '{}' in variable '{}'. Must be of type '{}'."
   205                                                               .format(value, attribute_name, self.name, allowed_type).encode('utf-8'))
   206     18356       8310.0      0.5      8.3          if setter is not None:
   207      7355      27983.0      3.8     28.0              value = setter(value)
   208     18356       9066.0      0.5      9.1          if value is None and default is not None:
   209      3598       1477.0      0.4      1.5              return default
   210     14758       5784.0      0.4      5.8          return value

Total time: 0.117117 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/variables.py
Function: set_formulas at line 281

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   281                                               @profile
   282                                               def set_formulas(self, formulas_attr):
   283      1833      78513.0     42.8     67.0          formulas = SortedDict()
   284      2691       2747.0      1.0      2.3          for formula_name, formula in formulas_attr.items():
   285       858      26847.0     31.3     22.9              starting_date = self.parse_formula_name(formula_name)
   286                                           
   287       858        606.0      0.7      0.5              if self.end is not None and starting_date > self.end:
   288                                                           raise ValueError(u'You declared that "{}" ends on "{}", but you wrote a formula to calculate it from "{}" ({}). The "end" attribute of a variable must be posterior to the start dates of all its formulas.'
   289                                                               .format(self.name, self.end, starting_date, formula_name).encode('utf-8'))
   290                                           
   291       858       6151.0      7.2      5.3              formulas[str(starting_date)] = formula
   292                                           
   293                                                   # If the variable is reforming a baseline variable, keep the formulas from the latter when they are not overridden by new formulas.
   294      1833       1281.0      0.7      1.1          if self.baseline_variable is not None:
   295                                                       first_reform_formula_date = formulas.peekitem(0)[0] if formulas else None
   296                                                       formulas.update({
   297                                                           baseline_start_date: baseline_formula
   298                                                           for baseline_start_date, baseline_formula in self.baseline_variable.formulas.items()
   299                                                           if first_reform_formula_date is None or baseline_start_date < first_reform_formula_date
   300                                                           })
   301                                           
   302      1833        972.0      0.5      0.8          return formulas

