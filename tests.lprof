Timer unit: 1e-06 s

Total time: 264.966 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/simulations.py
Function: calculate at line 132

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   132                                               @profile
   133                                               def calculate(self, variable_name, period, **parameters):
   134                                                   """
   135                                                       Calculate the variable ``variable_name`` for the period ``period``, using the variable formula if it exists.
   136
   137                                                       :returns: A numpy array containing the result of the calculation
   138                                                   """
   139   7588195   23639782.0      3.1      8.9          entity = self.get_variable_entity(variable_name)
   140   7588195   32359714.0      4.3     12.2          holder = entity.get_holder(variable_name)
   141   7588195   10646990.0      1.4      4.0          variable = self.tax_benefit_system.get_variable(variable_name)
   142
   143   7588195    5678577.0      0.7      2.1          if period is not None and not isinstance(period, periods.Period):
   144                                                       period = periods.period(period)
   145
   146   7588195    3934447.0      0.5      1.5          if self.trace:
   147                                                       self.tracer.record_calculation_start(variable.name, period, **parameters)
   148
   149   7588195   24755206.0      3.3      9.3          self._check_period_consistency(period, variable)
   150
   151   7588195    4764665.0      0.6      1.8          extra_params = parameters.get('extra_params', ())
   152
   153                                                   # First look for a value already cached
   154   7588195   47661832.0      6.3     18.0          cached_array = holder.get_array(period, extra_params)
   155   7588195    3853281.0      0.5      1.5          if cached_array is not None:
   156   5005022    2662683.0      0.5      1.0              if self.trace:
   157                                                           self.tracer.record_calculation_end(variable.name, period, cached_array, **parameters)
   158   5005022    2183851.0      0.4      0.8              return cached_array
   159
   160   2583173    1592859.0      0.6      0.6          max_nb_cycles = parameters.get('max_nb_cycles')
   161   2583173    1270174.0      0.5      0.5          if max_nb_cycles is not None:
   162     32559      20506.0      0.6      0.0              self.max_nb_cycles = max_nb_cycles
   163
   164                                                   # First, try to run a formula
   165   2583173   44079593.0     17.1     16.6          array = self._run_formula(variable, entity, period, extra_params, max_nb_cycles)
   166
   167                                                   # If no result, try a base function
   168   2581896    1858588.0      0.7      0.7          if array is None and variable.base_function:
   169    312600   10811412.0     34.6      4.1              array = variable.base_function(holder, period, *extra_params)
   170
   171                                                   # If no result, use the default value
   172   2581896    1365077.0      0.5      0.5          if array is None:
   173    940999    4806254.0      5.1      1.8              array = holder.default_array()
   174
   175   2581896    5886031.0      2.3      2.2          self._clean_cycle_detection_data(variable.name)
   176   2581896    1351632.0      0.5      0.5          if max_nb_cycles is not None:
   177     32559      24817.0      0.8      0.0              self.max_nb_cycles = None
   178
   179   2581896   27064139.0     10.5     10.2          holder.put_in_cache(array, period, extra_params)
   180   2581896    1547115.0      0.6      0.6          if self.trace:
   181                                                       self.tracer.record_calculation_end(variable.name, period, array, **parameters)
   182
   183   2581896    1146941.0      0.4      0.4          return array

Total time: 291.873 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/simulations.py
Function: calculate_add at line 185

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   185                                               @profile
   186                                               def calculate_add(self, variable_name, period, **parameters):
   187   1345881    2365351.0      1.8      0.8          variable = self.tax_benefit_system.get_variable(variable_name)
   188
   189   1345881    1136977.0      0.8      0.4          if period is not None and not isinstance(period, periods.Period):
   190                                                       period = periods.period(period)
   191
   192                                                   # Check that the requested period matches definition_period
   193   1345881    1056890.0      0.8      0.4          if variable.definition_period == periods.YEAR and period.unit == periods.MONTH:
   194                                                       raise ValueError(u'Unable to compute variable {0} for period {1} : {0} can only be computed for year-long periods. You can use the DIVIDE option to get an estimate of {0} by dividing the yearly value by 12, or change the requested period to "period.this_year".'.format(
   195                                                           variable.name,
   196                                                           period,
   197                                                           ).encode('utf-8'))
   198
   199   1345881    1405322.0      1.0      0.5          if variable.definition_period not in [periods.MONTH, periods.YEAR]:
   200                                                       raise ValueError(u'Unable to sum constant variable {} over period {} : only variables defined monthly or yearly can be summed over time.'.format(
   201                                                           variable.name,
   202                                                           period).encode('utf-8'))
   203
   204   1345881     731008.0      0.5      0.3          return sum(
   205   1345881    1034780.0      0.8      0.4              self.calculate(variable_name, sub_period, **parameters)
   206   1345881  284142973.0    211.1     97.4              for sub_period in period.get_subperiods(variable.definition_period)
   207                                                       )

Total time: 106.676 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/taxscales.py
Function: calc at line 238

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   238                                               @profile
   239                                               def calc(self, base, factor = 1, round_base_decimals = None):
   240   1130636   25436651.0     22.5     23.8          base1 = _T(_tile(base, _shape(self.thresholds)))
   241   1130623    1523964.0      1.3      1.4          if isinstance(factor, (float, int)):
   242    101097     757838.0      7.5      0.7              factor = np.ones(len(base)) * factor
   243                                                   # np.finfo(np.float).eps is used to avoid np.nan = 0 * np.inf creation
   244   1130623   11182227.0      9.9     10.5          thresholds1 = _threshold1b(factor, _threshold1a(self.thresholds))
   245   1130623     633155.0      0.6      0.6          if round_base_decimals is not None:
   246   1069151   12938445.0     12.1     12.1              thresholds1 = _round(thresholds1, round_base_decimals)
   247   1130623    3711500.0      3.3      3.5          a = _max_min(base1, thresholds1)
   248   1130623     547379.0      0.5      0.5          if round_base_decimals is None:
   249     61472     218838.0      3.6      0.2              return np.dot(self.rates, a.T)
   250                                                   else:
   251   1069151   23200511.0     21.7     21.7              r = _tile(self.rates, _shape(base))
   252   1069151   11307583.0     10.6     10.6              b = _round(a, round_base_decimals)
   253   1069151   15217558.0     14.2     14.3              return _sum(_round(_multiply(r, b), round_base_decimals))

