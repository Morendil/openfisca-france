Timer unit: 1e-06 s

Total time: 79.4635 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/entities.py
Function: check_variable_defined_for_entity at line 170

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   170                                               @profile
   171                                               def check_variable_defined_for_entity(self, variable_name):
   172  13815484   71670481.0      5.2     90.2          variable_entity = self.simulation.tax_benefit_system.get_variable(variable_name, check_existence = True).entity
   173  13815484    7793028.0      0.6      9.8          if not isinstance(self, variable_entity):
   174                                                       message = linesep.join([
   175                                                           u"You tried to compute the variable '{0}' for the entity '{1}';".format(variable_name, self.plural),
   176                                                           u"however the variable '{0}' is defined for '{1}'.".format(variable_name, variable_entity.plural),
   177                                                           u"Learn more about entities in our documentation:",
   178                                                           u"<http://openfisca.org/doc/coding-the-legislation/50_entities.html>."])
   179                                                       raise ValueError(message)

Total time: 27.0734 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/simulations.py
Function: _check_period_consistency at line 275

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   275                                               @profile
   276                                               def _check_period_consistency(self, period, variable):
   277                                                   """
   278                                                       Check that a period matches the variable definition_period
   279                                                   """
   280   7597923    5155722.0      0.7     19.0          if variable.definition_period == periods.ETERNITY:
   281     39388      16315.0      0.4      0.1              return  # For variables which values are constant in time, all periods are accepted
   282                                           
   283   7558535    9450901.0      1.3     34.9          if variable.definition_period == periods.MONTH and period.unit != periods.MONTH:
   284                                                       raise ValueError(u'Unable to compute variable {0} for period {1} : {0} must be computed for a whole month. You can use the ADD option to sum {0} over the requested period, or change the requested period to "period.first_month".'.format(
   285                                                           variable.name,
   286                                                           period
   287                                                           ).encode('utf-8'))
   288                                           
   289   7558535    4909071.0      0.6     18.1          if variable.definition_period == periods.YEAR and period.unit != periods.YEAR:
   290                                                       raise ValueError(u'Unable to compute variable {0} for period {1} : {0} must be computed for a whole year. You can use the DIVIDE option to get an estimate of {0} by dividing the yearly value by 12, or change the requested period to "period.this_year".'.format(
   291                                                           variable.name,
   292                                                           period
   293                                                           ).encode('utf-8'))
   294                                           
   295   7558535    7541357.0      1.0     27.9          if period.size != 1:
   296                                                       raise ValueError(u'Unable to compute variable {0} for period {1} : {0} must be computed for a whole {2}. You can use the ADD option to sum {0} over the requested period.'.format(
   297                                                           variable.name,
   298                                                           period,
   299                                                           'month' if variable.definition_period == periods.MONTH else 'year'
   300                                                           ).encode('utf-8'))

Total time: 42.3197 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/taxbenefitsystems.py
Function: get_variable at line 250

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   250                                               @profile
   251                                               def get_variable(self, variable_name, check_existence = False):
   252                                                   """
   253                                                   Get a variable from the tax and benefit system.
   254                                           
   255                                                   :param variable_name: Name of the requested variable.
   256                                                   :param check_existence: If True, raise an error if the requested variable does not exist.
   257                                                   """
   258  31011729   22564014.0      0.7     53.3          variables = self.variables.get(variable_name)
   259  31011729   10749659.0      0.3     25.4          if not variables and check_existence:
   260                                                       raise VariableNotFound(variable_name, self)
   261  31011729    9006020.0      0.3     21.3          return variables

Total time: 118.584 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-core/openfisca_core/taxscales.py
Function: calc at line 190

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   190                                               @profile
   191                                               def calc(self, base, factor = 1, round_base_decimals = None):
   192   1133580   20110278.0     17.7     17.0          base1 = np.tile(base, (len(self.thresholds), 1)).T
   193   1133580    1653437.0      1.5      1.4          if isinstance(factor, (float, int)):
   194    101179     856322.0      8.5      0.7              factor = np.ones(len(base)) * factor
   195                                                   # np.finfo(np.float).eps is used to avoid np.nan = 0 * np.inf creation
   196   1133580   24025401.0     21.2     20.3          thresholds1 = np.outer(factor + np.finfo(np.float).eps, np.array(self.thresholds + [np.inf]))
   197   1133580     810657.0      0.7      0.7          if round_base_decimals is not None:
   198   1072039   11778381.0     11.0      9.9              thresholds1 = np.round(thresholds1, round_base_decimals)
   199   1133580    9143424.0      8.1      7.7          a = max_(min_(base1, thresholds1[:, 1:]) - thresholds1[:, :-1], 0)
   200   1133580     710445.0      0.6      0.6          if round_base_decimals is None:
   201     61541     265921.0      4.3      0.2              return np.dot(self.rates, a.T)
   202                                                   else:
   203   1072039   23446210.0     21.9     19.8              r = np.tile(self.rates, (len(base), 1))
   204   1072039   10104201.0      9.4      8.5              b = np.round(a, round_base_decimals)
   205   1072039   15679365.0     14.6     13.2              return np.round(r * b, round_base_decimals).sum(axis = 1)

