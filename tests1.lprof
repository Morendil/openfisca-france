Timer unit: 1e-06 s

Total time: 124.474 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-france/openfisca_france/model/prelevements_obligatoires/prelevements_sociaux/cotisations_sociales/base.py
Function: apply_bareme_for_relevant_type_sal at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           def apply_bareme_for_relevant_type_sal(
    12                                                   bareme_by_type_sal_name,
    13                                                   bareme_name,
    14                                                   categorie_salarie,
    15                                                   base,
    16                                                   plafond_securite_sociale,
    17                                                   round_base_decimals = DEFAULT_ROUND_BASE_DECIMALS,
    18                                                   ):
    19    470478     355069.0      0.8      0.3      assert bareme_by_type_sal_name is not None
    20    470478     282682.0      0.6      0.2      assert bareme_name is not None
    21    470478     255793.0      0.5      0.2      assert categorie_salarie is not None
    22    470478     255968.0      0.5      0.2      assert base is not None
    23    470478     250362.0      0.5      0.2      assert plafond_securite_sociale is not None
    24    470478     362482.0      0.8      0.3      TypesCategorieSalarie = categorie_salarie.possible_values
    25
    26    470478     414550.0      0.9      0.3      def iter_cotisations():
    27                                                   for type_sal in TypesCategorieSalarie:
    28                                                       type_sal_name = type_sal.name
    29                                                       try:
    30                                                           node = bareme_by_type_sal_name[type_sal_name]
    31                                                       except KeyError:
    32                                                           continue  # to deal with public_titulaire_militaire
    33                                                       try:
    34                                                           bareme = node[bareme_name]
    35                                                       except KeyError:
    36                                                           continue
    37                                                       yield bareme.calc(
    38                                                           base * (categorie_salarie == type_sal),
    39                                                           factor = plafond_securite_sociale,
    40                                                           round_base_decimals = round_base_decimals,
    41                                                           )
    42
    43    470478  122297473.0    259.9     98.3      return - sum(iter_cotisations())

Total time: 227.331 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-france/openfisca_france/model/prelevements_obligatoires/prelevements_sociaux/cotisations_sociales/base.py
Function: apply_bareme at line 46

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    46                                           @profile
    47                                           def apply_bareme(individu, period, parameters, cotisation_type = None, bareme_name = None, variable_name = None):
    48    192558    6925584.0     36.0      3.0      cotisation_mode_recouvrement = individu('cotisation_sociale_mode_recouvrement', period)
    49    192558     138033.0      0.7      0.1      TypesCotisationSocialeModeRecouvrement = cotisation_mode_recouvrement.possible_values
    50                                               cotisation = (
    51                                                   # anticipé (mensuel avec recouvrement en fin d'année)
    52                                                   cotisation_mode_recouvrement == TypesCotisationSocialeModeRecouvrement.mensuel) * (
    53                                                       compute_cotisation_anticipee(
    54                                                           individu,
    55                                                           period,
    56                                                           parameters,
    57                                                           cotisation_type = cotisation_type,
    58                                                           bareme_name = bareme_name,
    59                                                           variable_name = variable_name,
    60                                                           )
    61                                                       ) + (
    62                                                   # en fin d'année
    63                                                   cotisation_mode_recouvrement == TypesCotisationSocialeModeRecouvrement.annuel) * (
    64                                                       compute_cotisation_annuelle(
    65                                                           individu,
    66                                                           period,
    67                                                           parameters,
    68                                                           cotisation_type = cotisation_type,
    69                                                           bareme_name = bareme_name,
    70                                                           )
    71    192558  131859786.0    684.8     58.0              ) + (
    72                                                   # mensuel stricte
    73    192558     757425.0      3.9      0.3          cotisation_mode_recouvrement == TypesCotisationSocialeModeRecouvrement.mensuel_strict) * (
    74    192558      88188.0      0.5      0.0              compute_cotisation(
    75    192558      71134.0      0.4      0.0                  individu,
    76    192558      66431.0      0.3      0.0                  period,
    77    192558      74122.0      0.4      0.0                  parameters,
    78    192558      68802.0      0.4      0.0                  cotisation_type = cotisation_type,
    79    192558   87191911.0    452.8     38.4                  bareme_name = bareme_name,
    80                                                           )
    81                                                       )
    82    192558      89807.0      0.5      0.0      return cotisation

Total time: 209.888 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-france/openfisca_france/model/prelevements_obligatoires/prelevements_sociaux/cotisations_sociales/base.py
Function: compute_cotisation at line 85

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    85                                           @profile
    86                                           def compute_cotisation(individu, period, parameters, cotisation_type = None, bareme_name = None):
    87    399171     244028.0      0.6      0.1      assert cotisation_type is not None
    88    399171    2159620.0      5.4      1.0      law = parameters(period)
    89    399171     221189.0      0.6      0.1      if cotisation_type == "employeur":
    90      1061        950.0      0.9      0.0          bareme_by_type_sal_name = law.cotsoc.cotisations_employeur
    91    398110     195343.0      0.5      0.1      elif cotisation_type == "salarie":
    92    398110     341562.0      0.9      0.2          bareme_by_type_sal_name = law.cotsoc.cotisations_salarie
    93    399171     189479.0      0.5      0.1      assert bareme_name is not None
    94
    95    399171   46300041.0    116.0     22.1      assiette_cotisations_sociales = individu('assiette_cotisations_sociales', period, options = [ADD])
    96    399171   36219102.0     90.7     17.3      plafond_securite_sociale = individu('plafond_securite_sociale', period, options = [ADD])
    97    399171   13713781.0     34.4      6.5      categorie_salarie = individu('categorie_salarie', period.first_month)
    98
    99    399171     245278.0      0.6      0.1      cotisation = apply_bareme_for_relevant_type_sal(
   100    399171     192754.0      0.5      0.1          bareme_by_type_sal_name = bareme_by_type_sal_name,
   101    399171     180325.0      0.5      0.1          bareme_name = bareme_name,
   102    399171     175012.0      0.4      0.1          base = assiette_cotisations_sociales,
   103    399171     174566.0      0.4      0.1          plafond_securite_sociale = plafond_securite_sociale,
   104    399171  109033581.0    273.2     51.9          categorie_salarie = categorie_salarie,
   105                                                   )
   106    399171     301104.0      0.8      0.1      return cotisation

Total time: 17.435 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-france/openfisca_france/model/prelevements_obligatoires/prelevements_sociaux/cotisations_sociales/base.py
Function: compute_cotisation_annuelle at line 109

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   109                                           @profile
   110                                           def compute_cotisation_annuelle(individu, period, parameters, cotisation_type = None, bareme_name = None):
   111    192558     423255.0      2.2      2.4      if period.start.month < 12:
   112    178503      71035.0      0.4      0.4          return 0
   113     14055      17765.0      1.3      0.1      if period.start.month == 12:
   114     14055       5031.0      0.4      0.0          return compute_cotisation(
   115     14055       4413.0      0.3      0.0              individu,
   116     14055     180621.0     12.9      1.0              period.this_year,
   117     14055       5718.0      0.4      0.0              parameters,
   118     14055       4662.0      0.3      0.0              cotisation_type = cotisation_type,
   119     14055   16722468.0   1189.8     95.9              bareme_name = bareme_name,
   120                                                       )

Total time: 119.64 s
File: /Users/hyperion/Sites/dinsic/openfisca/openfisca-france/openfisca_france/model/prelevements_obligatoires/prelevements_sociaux/cotisations_sociales/base.py
Function: compute_cotisation_anticipee at line 123

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   123                                           @profile
   124                                           def compute_cotisation_anticipee(individu, period, parameters, cotisation_type = None, bareme_name = None, variable_name = None):
   125    192558     353746.0      1.8      0.3      if period.start.month < 12:
   126    178503      87235.0      0.5      0.1          return compute_cotisation(
   127    178503      70119.0      0.4      0.1              individu,
   128    178503    2040513.0     11.4      1.7              period.first_month,
   129    178503      87707.0      0.5      0.1              parameters,
   130    178503      71695.0      0.4      0.1              cotisation_type = cotisation_type,
   131    178503   94510152.0    529.5     79.0              bareme_name = bareme_name,
   132                                                       )
   133     14055      19295.0      1.4      0.0      if period.start.month == 12:
   134     14055      57895.0      4.1      0.0          cumul = individu(variable_name, period.start.offset('first-of', 'month').offset(
   135     14055    5347783.0    380.5      4.5              -11, 'month').period('month', 11), max_nb_cycles = 1, options = [ADD])
   136                                                   # December variable_name depends on variable_name in the past 11 months.
   137                                                   # We need to explicitely allow this recursion.
   138
   139     14055      10971.0      0.8      0.0          return compute_cotisation(
   140     14055       6498.0      0.5      0.0              individu,
   141     14055     154340.0     11.0      0.1              period.this_year,
   142     14055       7368.0      0.5      0.0              parameters,
   143     14055       5998.0      0.4      0.0              cotisation_type = cotisation_type,
   144     14055   16775854.0   1193.6     14.0              bareme_name = bareme_name,
   145     14055      32691.0      2.3      0.0              ) - cumul

